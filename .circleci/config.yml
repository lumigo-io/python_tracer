version: 2.1
defaults: &defaults
  working_directory: ~/python_tracer
  docker:
  - image: lumigo/ci:latest
    auth:
      username: lumigo
      password: $DOCKERHUB_PASSWORD

commands:
  checkout_utils:
    description: "Checkout various utilities"
    steps:
      - run:
          command: |
            mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            cd ..
            git clone git@github.com:lumigo-io/common-resources.git
      - run:
          command: |
            cd ..
            git clone git@github.com:lumigo-io/utils.git
      - run:
          command: |
            cd ..
            git clone git@github.com:lumigo-io/larn.git

  checkout_credentials:
    description: "Checkout credentials"
    steps:
      - run:
          command: |
            cd ..
            git clone git@github.com:lumigo-io/common-resources.git

  checkout_integration_tests:
    description: "Checkout integration tests"
    steps:
      - run:
          command: |
            cd ..
            git clone git@github.com:lumigo-io/integration-tests.git
  checkout_dashboard:
    description: "Checkout Lumigo Platform (dashboard)"
    steps:
      - run:
          command: |
            cd ..
            git clone git@github.com:lumigo-io/dashboard.git
            
  checkout_code:
    description: "Checkout code and test it"
    steps:
      - checkout
      - run:
            # Avoid annoying double runs after deploy.
            # See https://discuss.circleci.com/t/job-runs-even-when-tags-ignore-filter-is-triggered-when-combined-with-branches-only/20664
            name: Check if tagged
            command: |
              tags=$(git tag -l --points-at HEAD)
              echo "Tags $tags"
              if [[ ! -z "$tags" ]]
              then
                echo "A tagged commit, skip..."
                circleci step halt
              fi
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.7/site-packages

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
            python setup.py develop
      # https://discuss.circleci.com/t/activate-python-virtualenv-for-whole-job/14434
      - run: echo "source venv/bin/activate" >> $BASH_ENV
      - run: pip install pytest-cov
      - run: pip install pre-commit
      - run: pre-commit install

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

workflows:
  test-deploy:
    jobs:
    - test:
        filters:
          branches:
            ignore: master
    - integration-test:
        filters:
          branches:
            ignore: master
        requires:
          - test
    - e2e-test:
        requires:
          - integration-test
        filters:
          branches:
            ignore: master
    - deploy:
        filters:
          branches:
            only: master

jobs:
  test:
    <<: *defaults
    steps:
      - checkout_code
      - checkout_credentials
      # run tests!
      - run: echo "export AWS_DEFAULT_REGION=us-west-2" >> $BASH_ENV
      - run: mkdir -p ~/.aws
      - run: echo ${KEY} | gpg --batch -d --passphrase-fd 0 ../common-resources/encrypted_files/credentials_integration.enc > ~/.aws/credentials
      - run: pre-commit install
      - run: ./scripts/checks.sh
      - run: bash <(curl -s https://codecov.io/bash)

  integration-test:
    <<: *defaults
    resource_class: medium+
    steps:
      - checkout_utils
      - checkout_code
      - run: ./scripts/ci_deploy.sh
      - run: cd ../integration-tests && npm i
      - run: sudo npm install -g recursive-install
      - run: cd ../integration-tests && git rev-parse HEAD > ../commits && cd ../python_tracer && git rev-parse HEAD >> ../commits &&  cd ../lumigo-node && git rev-parse HEAD >> ../commits &&  cd ../java-tracer && git rev-parse HEAD >> ../commits
      - restore_cache:
          keys:
            - IT-{{ .Branch }}-{{ checksum "../commits" }}
      - run: cd ../integration-tests && ./scripts/parallel_prepare_env.sh
      - run: cd ../integration-tests && ./scripts/parallel_deploy.sh --spec python
      - save_cache:
          key: IT-{{ .Branch }}-{{ checksum "../commits" }}
          paths:
            - ../integration-tests/src/e2e-test/cypress.env.json
            - ../integration-tests/src/e2e-test/cypress/cf-stack.json
            - ../integration-tests/.env
            - ../integration-tests/.env2
            - ../integration-tests/.env3
            - ../integration-tests/.deployment_finished.env
            - ../integration-tests/.deployment_finished.env2
            - ../integration-tests/.deployment_finished.env3
      - run: cd ../integration-tests && export testPython=true && npm run test-parallel
      - store_test_results:
          path: ../integration-tests/src/test/test-results
      - run: mkdir -p ../envs && cd ../integration-tests && cp src/e2e-test/cypress.env.json ../envs
      - run: mkdir -p ../stack && cd ../integration-tests && cp src/e2e-test/cypress/cf-stack.json ../stack
      - persist_to_workspace:
          root: ../
          paths:
            - envs/
            - stack/
            - .aws/
  e2e-test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ../
      - checkout_utils
      - checkout_code
      - checkout_integration_tests
      - checkout_dashboard
      - run: mv ~/.aws/credentials tmp && { echo '[default]' ; echo 'region=us-west-2' ; cat tmp; } > ~/.aws/credentials
      - run: cat ../envs/cypress.env.json
      - run: cd ../integration-tests && cp ../envs/cypress.env.json ./src/e2e-test/
      - run: cd ../integration-tests && cp ../stack/cf-stack.json ./src/e2e-test/cypress/
      - run: cd ../dashboard && npm i
      - run: cd ../dashboard && ./scripts/prepare_env.sh --profile $(cat ~/envs/cypress.env.json | jq -r '.PROFILE_NAME') --env $(cat ~/envs/cypress.env.json | jq -r '.ENV')
      - run: cd ../integration-tests/src/e2e-test && npm i
      - run: (cd ../dashboard && npm run start:ci) & (cd ../integration-tests && ./src/e2e-test/node_modules/.bin/wait-on http://127.0.0.1:3000 && npm run cypress:run)
      - store_artifacts:
          path: ~/integration-tests/src/e2e-test/cypress/videos
      - store_artifacts:
          path: ~/integration-tests/src/e2e-test/cypress/cf-stack.json
      - store_artifacts:
          path: ~/integration-tests/src/e2e-test/mochawesome-report

  deploy:
    <<: *defaults
    steps:
      - checkout_code
      - checkout_utils
      - run: ./scripts/bd_to_prod.sh
